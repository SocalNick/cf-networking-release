// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"policy-server/store"
	"sync"

	"code.cloudfoundry.org/cf-networking-helpers/db"
)

type EgressDestinationRepo struct {
	AllStub        func(tx db.Transaction) ([]store.EgressDestination, error)
	allMutex       sync.RWMutex
	allArgsForCall []struct {
		tx db.Transaction
	}
	allReturns struct {
		result1 []store.EgressDestination
		result2 error
	}
	allReturnsOnCall map[int]struct {
		result1 []store.EgressDestination
		result2 error
	}
	CreateIPRangeStub        func(tx db.Transaction, destinationTerminalGUID, startIP, endIP, protocol string, startPort, endPort, icmpType, icmpCode int64) (int64, error)
	createIPRangeMutex       sync.RWMutex
	createIPRangeArgsForCall []struct {
		tx                      db.Transaction
		destinationTerminalGUID string
		startIP                 string
		endIP                   string
		protocol                string
		startPort               int64
		endPort                 int64
		icmpType                int64
		icmpCode                int64
	}
	createIPRangeReturns struct {
		result1 int64
		result2 error
	}
	createIPRangeReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	UpdateIPRangeStub        func(tx db.Transaction, destinationTerminalGUID, startIP, endIP, protocol string, startPort, endPort, icmpType, icmpCode int64) error
	updateIPRangeMutex       sync.RWMutex
	updateIPRangeArgsForCall []struct {
		tx                      db.Transaction
		destinationTerminalGUID string
		startIP                 string
		endIP                   string
		protocol                string
		startPort               int64
		endPort                 int64
		icmpType                int64
		icmpCode                int64
	}
	updateIPRangeReturns struct {
		result1 error
	}
	updateIPRangeReturnsOnCall map[int]struct {
		result1 error
	}
	GetByGUIDStub        func(tx db.Transaction, guid ...string) ([]store.EgressDestination, error)
	getByGUIDMutex       sync.RWMutex
	getByGUIDArgsForCall []struct {
		tx   db.Transaction
		guid []string
	}
	getByGUIDReturns struct {
		result1 []store.EgressDestination
		result2 error
	}
	getByGUIDReturnsOnCall map[int]struct {
		result1 []store.EgressDestination
		result2 error
	}
	DeleteStub        func(tx db.Transaction, guid string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		tx   db.Transaction
		guid string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *EgressDestinationRepo) All(tx db.Transaction) ([]store.EgressDestination, error) {
	fake.allMutex.Lock()
	ret, specificReturn := fake.allReturnsOnCall[len(fake.allArgsForCall)]
	fake.allArgsForCall = append(fake.allArgsForCall, struct {
		tx db.Transaction
	}{tx})
	fake.recordInvocation("All", []interface{}{tx})
	fake.allMutex.Unlock()
	if fake.AllStub != nil {
		return fake.AllStub(tx)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.allReturns.result1, fake.allReturns.result2
}

func (fake *EgressDestinationRepo) AllCallCount() int {
	fake.allMutex.RLock()
	defer fake.allMutex.RUnlock()
	return len(fake.allArgsForCall)
}

func (fake *EgressDestinationRepo) AllArgsForCall(i int) db.Transaction {
	fake.allMutex.RLock()
	defer fake.allMutex.RUnlock()
	return fake.allArgsForCall[i].tx
}

func (fake *EgressDestinationRepo) AllReturns(result1 []store.EgressDestination, result2 error) {
	fake.AllStub = nil
	fake.allReturns = struct {
		result1 []store.EgressDestination
		result2 error
	}{result1, result2}
}

func (fake *EgressDestinationRepo) AllReturnsOnCall(i int, result1 []store.EgressDestination, result2 error) {
	fake.AllStub = nil
	if fake.allReturnsOnCall == nil {
		fake.allReturnsOnCall = make(map[int]struct {
			result1 []store.EgressDestination
			result2 error
		})
	}
	fake.allReturnsOnCall[i] = struct {
		result1 []store.EgressDestination
		result2 error
	}{result1, result2}
}

func (fake *EgressDestinationRepo) CreateIPRange(tx db.Transaction, destinationTerminalGUID string, startIP string, endIP string, protocol string, startPort int64, endPort int64, icmpType int64, icmpCode int64) (int64, error) {
	fake.createIPRangeMutex.Lock()
	ret, specificReturn := fake.createIPRangeReturnsOnCall[len(fake.createIPRangeArgsForCall)]
	fake.createIPRangeArgsForCall = append(fake.createIPRangeArgsForCall, struct {
		tx                      db.Transaction
		destinationTerminalGUID string
		startIP                 string
		endIP                   string
		protocol                string
		startPort               int64
		endPort                 int64
		icmpType                int64
		icmpCode                int64
	}{tx, destinationTerminalGUID, startIP, endIP, protocol, startPort, endPort, icmpType, icmpCode})
	fake.recordInvocation("CreateIPRange", []interface{}{tx, destinationTerminalGUID, startIP, endIP, protocol, startPort, endPort, icmpType, icmpCode})
	fake.createIPRangeMutex.Unlock()
	if fake.CreateIPRangeStub != nil {
		return fake.CreateIPRangeStub(tx, destinationTerminalGUID, startIP, endIP, protocol, startPort, endPort, icmpType, icmpCode)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createIPRangeReturns.result1, fake.createIPRangeReturns.result2
}

func (fake *EgressDestinationRepo) CreateIPRangeCallCount() int {
	fake.createIPRangeMutex.RLock()
	defer fake.createIPRangeMutex.RUnlock()
	return len(fake.createIPRangeArgsForCall)
}

func (fake *EgressDestinationRepo) CreateIPRangeArgsForCall(i int) (db.Transaction, string, string, string, string, int64, int64, int64, int64) {
	fake.createIPRangeMutex.RLock()
	defer fake.createIPRangeMutex.RUnlock()
	return fake.createIPRangeArgsForCall[i].tx, fake.createIPRangeArgsForCall[i].destinationTerminalGUID, fake.createIPRangeArgsForCall[i].startIP, fake.createIPRangeArgsForCall[i].endIP, fake.createIPRangeArgsForCall[i].protocol, fake.createIPRangeArgsForCall[i].startPort, fake.createIPRangeArgsForCall[i].endPort, fake.createIPRangeArgsForCall[i].icmpType, fake.createIPRangeArgsForCall[i].icmpCode
}

func (fake *EgressDestinationRepo) CreateIPRangeReturns(result1 int64, result2 error) {
	fake.CreateIPRangeStub = nil
	fake.createIPRangeReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *EgressDestinationRepo) CreateIPRangeReturnsOnCall(i int, result1 int64, result2 error) {
	fake.CreateIPRangeStub = nil
	if fake.createIPRangeReturnsOnCall == nil {
		fake.createIPRangeReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.createIPRangeReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *EgressDestinationRepo) UpdateIPRange(tx db.Transaction, destinationTerminalGUID string, startIP string, endIP string, protocol string, startPort int64, endPort int64, icmpType int64, icmpCode int64) error {
	fake.updateIPRangeMutex.Lock()
	ret, specificReturn := fake.updateIPRangeReturnsOnCall[len(fake.updateIPRangeArgsForCall)]
	fake.updateIPRangeArgsForCall = append(fake.updateIPRangeArgsForCall, struct {
		tx                      db.Transaction
		destinationTerminalGUID string
		startIP                 string
		endIP                   string
		protocol                string
		startPort               int64
		endPort                 int64
		icmpType                int64
		icmpCode                int64
	}{tx, destinationTerminalGUID, startIP, endIP, protocol, startPort, endPort, icmpType, icmpCode})
	fake.recordInvocation("UpdateIPRange", []interface{}{tx, destinationTerminalGUID, startIP, endIP, protocol, startPort, endPort, icmpType, icmpCode})
	fake.updateIPRangeMutex.Unlock()
	if fake.UpdateIPRangeStub != nil {
		return fake.UpdateIPRangeStub(tx, destinationTerminalGUID, startIP, endIP, protocol, startPort, endPort, icmpType, icmpCode)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.updateIPRangeReturns.result1
}

func (fake *EgressDestinationRepo) UpdateIPRangeCallCount() int {
	fake.updateIPRangeMutex.RLock()
	defer fake.updateIPRangeMutex.RUnlock()
	return len(fake.updateIPRangeArgsForCall)
}

func (fake *EgressDestinationRepo) UpdateIPRangeArgsForCall(i int) (db.Transaction, string, string, string, string, int64, int64, int64, int64) {
	fake.updateIPRangeMutex.RLock()
	defer fake.updateIPRangeMutex.RUnlock()
	return fake.updateIPRangeArgsForCall[i].tx, fake.updateIPRangeArgsForCall[i].destinationTerminalGUID, fake.updateIPRangeArgsForCall[i].startIP, fake.updateIPRangeArgsForCall[i].endIP, fake.updateIPRangeArgsForCall[i].protocol, fake.updateIPRangeArgsForCall[i].startPort, fake.updateIPRangeArgsForCall[i].endPort, fake.updateIPRangeArgsForCall[i].icmpType, fake.updateIPRangeArgsForCall[i].icmpCode
}

func (fake *EgressDestinationRepo) UpdateIPRangeReturns(result1 error) {
	fake.UpdateIPRangeStub = nil
	fake.updateIPRangeReturns = struct {
		result1 error
	}{result1}
}

func (fake *EgressDestinationRepo) UpdateIPRangeReturnsOnCall(i int, result1 error) {
	fake.UpdateIPRangeStub = nil
	if fake.updateIPRangeReturnsOnCall == nil {
		fake.updateIPRangeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateIPRangeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *EgressDestinationRepo) GetByGUID(tx db.Transaction, guid ...string) ([]store.EgressDestination, error) {
	fake.getByGUIDMutex.Lock()
	ret, specificReturn := fake.getByGUIDReturnsOnCall[len(fake.getByGUIDArgsForCall)]
	fake.getByGUIDArgsForCall = append(fake.getByGUIDArgsForCall, struct {
		tx   db.Transaction
		guid []string
	}{tx, guid})
	fake.recordInvocation("GetByGUID", []interface{}{tx, guid})
	fake.getByGUIDMutex.Unlock()
	if fake.GetByGUIDStub != nil {
		return fake.GetByGUIDStub(tx, guid...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getByGUIDReturns.result1, fake.getByGUIDReturns.result2
}

func (fake *EgressDestinationRepo) GetByGUIDCallCount() int {
	fake.getByGUIDMutex.RLock()
	defer fake.getByGUIDMutex.RUnlock()
	return len(fake.getByGUIDArgsForCall)
}

func (fake *EgressDestinationRepo) GetByGUIDArgsForCall(i int) (db.Transaction, []string) {
	fake.getByGUIDMutex.RLock()
	defer fake.getByGUIDMutex.RUnlock()
	return fake.getByGUIDArgsForCall[i].tx, fake.getByGUIDArgsForCall[i].guid
}

func (fake *EgressDestinationRepo) GetByGUIDReturns(result1 []store.EgressDestination, result2 error) {
	fake.GetByGUIDStub = nil
	fake.getByGUIDReturns = struct {
		result1 []store.EgressDestination
		result2 error
	}{result1, result2}
}

func (fake *EgressDestinationRepo) GetByGUIDReturnsOnCall(i int, result1 []store.EgressDestination, result2 error) {
	fake.GetByGUIDStub = nil
	if fake.getByGUIDReturnsOnCall == nil {
		fake.getByGUIDReturnsOnCall = make(map[int]struct {
			result1 []store.EgressDestination
			result2 error
		})
	}
	fake.getByGUIDReturnsOnCall[i] = struct {
		result1 []store.EgressDestination
		result2 error
	}{result1, result2}
}

func (fake *EgressDestinationRepo) Delete(tx db.Transaction, guid string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		tx   db.Transaction
		guid string
	}{tx, guid})
	fake.recordInvocation("Delete", []interface{}{tx, guid})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(tx, guid)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteReturns.result1
}

func (fake *EgressDestinationRepo) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *EgressDestinationRepo) DeleteArgsForCall(i int) (db.Transaction, string) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].tx, fake.deleteArgsForCall[i].guid
}

func (fake *EgressDestinationRepo) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *EgressDestinationRepo) DeleteReturnsOnCall(i int, result1 error) {
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *EgressDestinationRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.allMutex.RLock()
	defer fake.allMutex.RUnlock()
	fake.createIPRangeMutex.RLock()
	defer fake.createIPRangeMutex.RUnlock()
	fake.updateIPRangeMutex.RLock()
	defer fake.updateIPRangeMutex.RUnlock()
	fake.getByGUIDMutex.RLock()
	defer fake.getByGUIDMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *EgressDestinationRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
