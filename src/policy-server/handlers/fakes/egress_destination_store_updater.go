// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"policy-server/handlers"
	"policy-server/store"
	"sync"
)

type EgressDestinationStoreUpdater struct {
	UpdateStub        func([]store.EgressDestination) ([]store.EgressDestination, error)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 []store.EgressDestination
	}
	updateReturns struct {
		result1 []store.EgressDestination
		result2 error
	}
	updateReturnsOnCall map[int]struct {
		result1 []store.EgressDestination
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *EgressDestinationStoreUpdater) Update(arg1 []store.EgressDestination) ([]store.EgressDestination, error) {
	var arg1Copy []store.EgressDestination
	if arg1 != nil {
		arg1Copy = make([]store.EgressDestination, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 []store.EgressDestination
	}{arg1Copy})
	fake.recordInvocation("Update", []interface{}{arg1Copy})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateReturns.result1, fake.updateReturns.result2
}

func (fake *EgressDestinationStoreUpdater) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *EgressDestinationStoreUpdater) UpdateArgsForCall(i int) []store.EgressDestination {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.updateArgsForCall[i].arg1
}

func (fake *EgressDestinationStoreUpdater) UpdateReturns(result1 []store.EgressDestination, result2 error) {
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 []store.EgressDestination
		result2 error
	}{result1, result2}
}

func (fake *EgressDestinationStoreUpdater) UpdateReturnsOnCall(i int, result1 []store.EgressDestination, result2 error) {
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 []store.EgressDestination
			result2 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 []store.EgressDestination
		result2 error
	}{result1, result2}
}

func (fake *EgressDestinationStoreUpdater) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *EgressDestinationStoreUpdater) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.EgressDestinationStoreUpdater = new(EgressDestinationStoreUpdater)
